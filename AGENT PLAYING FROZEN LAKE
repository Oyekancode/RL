Setting up Frozen lake in code

import numpy as np
import gym
import random
import time
from IPython.display import clear_output

Creating the enviroment
env = gym.make("FrozenLake-v1", render_mode = "ansi")
action_space_size = env.action_space.n
state_space_size = env.observation_space.n
q_table = np.zeros((state_space_size, action_space_size))
print(q_table)

num_episodes = 10000
max_steps_per_episode = 100

learning_rate = 0.1
discount_rate = 0.99

exploration_rate = 1
max_exploration_rate = 1
min_exploration_rate = 0.01
exploration_decay_rate = 0.01


#Q-learning algorithm

for episode in range(num_episodes):
    state =  env.reset()[0]
    
    
    done = False
    rewards_current_episode = 0
    
    
    for step in range(max_steps_per_episode):
        
        # Exploration-exploitation trade-off
        
        exploration_rate_threshold = random.uniform(0,1)
        if exploration_rate_threshold > exploration_rate: # choose action via exploitation
            action = np.argmax(q_table[state,:])
        else:
            action = env.action_space.sample() # choose action via exploration
            
            
        new_state, reward, done, truncated, info= env.step(action)
        
        #update Q-table for Q(s,a)
        q_table[state, action] = q_table[state, action]*(1-learning_rate) + \
          learning_rate * (reward + discount_rate * np.max(q_table[new_state,:]))
        
        state = new_state
        rewards_current_episode += reward
        
        if done == True:
            break
            
    # Exploration rate decay
    exploration_rate = min_exploration_rate + \
      (max_exploration_rate - min_exploration_rate) * np.exp(-exploration_decay_rate*episode)
    
    rewards_all_episodes.append(rewards_current_episode)
    
    
# Calculate and print the average reward per thousand episodes
rewards_per_thosand_episodes = np.split(np.array(rewards_all_episodes), num_episodes/1000)
count = 1000
print("*******Average rewards per thousand episodes******\n")
for r in rewards_per_thosand_episodes:
    print(count, ": ", str(sum(r/1000)))
    count +=1000

    

    
    
    
    
    
optimal_policy = np.argmax(q_table, axis=1)



#print updated Q-table
print("\n\n********Q-table******\n")
print(q_table)
print("Optimal Policy:")
print(optimal_policy)

THE AGENT PLAYING THE GAME

for episode in range(2):
    state = env.reset()[0]
    step = 0
    done = False
    print("******EPISODE ", episode+1, "*****\n\n\n\n")
    time.sleep(3)
    
    #print("EPISODE ", episode)

    for step in range(max_steps_per_episode):
        clear_output(wait=True)
        print(env.render())
        time.sleep(0.3)
        
        # Take the action (index) that have the maximum expected future reward given that state
        action = np.argmax(q_table[state,:])
        
        new_state, reward, done, info,_  = env.step(action)
        
        if done:
            clear_output(wait=True)
            # Here, we decide to only print the last state (to see if our agent is on the goal or fall into an hole)
            print(env.render())
            
            if done==max_steps_per_episode:
                print("*****You exhausted the maximum number of steps!****")
                time.sleep(5)
            
            if reward ==1:
                print("*****You reached the goal!****")
                time.sleep(5)
                 
            else:
                print("****You fell through a hole! ")
            
            # We print the number of step it took.
            print("Number of steps", step)
            break
        state = new_state
        
        
optimal_policy = np.argmax(q_table, axis=1)



print("Optimal Policy:")
print(optimal_policy)


env.close()
